--- # Metadata

# The entity that made the attestation. It is not a real field. Verifiers are
# expected to map verification keys to signer IDs.
signer: GitHubActions

--- # Payload

# --- Fields present in all attestations ---

# URI identifying what this attestation means and the schema for the rest of the
# payload. Only a small set of well-defined types are expected.
#
# Provenance explains the process that produced the subject.
attestation_type: https://in-toto.io/Provenance/v1

# The collection of artifacts that this attestation is about.
#
# - Key: URI or path-noscheme (RFC 3986) identifying the artifact. If there is a
#   single artifact and the name is not meaningful, use "_" as the key.
#   Verifiers MUST consider the key as security relevant. For URIs, Package URL
#   (once finalized) or SPDX Download Location (e.g. git+https) is RECOMMENDED.
#
# - Value: Set of cryptographic content digests.
#
# For provenance, this is the products of the build process.
subject:
  'curl-7.72.0.tar.bz2':
    sha256: ad91970864102a59765e20ce16216efc9d6ad381471f7accceceab7d905703ef
  'curl-7.72.0.tar.gz':
    sha256: d4d5899a3868fbb6ae1856c3e55a32ce35913de3956d1973caccd37bd0174fa2
  'curl-7.72.0.tar.xz':
    sha256: 0ded0808c4d85f2ee0db86980ae610cc9d165e9ca9da466196cc73c346513713
  'curl-7.72.0.zip':
    sha256: e363cc5b4e500bfc727106434a2578b38440aa18e105d57576f3d8f2abebf888

# The set of input artifacts that influenced the attestation. The type is the
# same as `subject`, but use of path-noscheme keys is DISCOURAGED.
#
# For provenance, this should cover all artifacts that influenced the build,
# including sources, dependencies, build tools, base images, and so on.
#
# TODO: Should we add a way to add additional information, such as which was the
#       VM base image or how it should be considered w.r.t. licensing?
#       If so, we may want to add more structure. Then again, we could always do
#       that in a future version if needed.
# TODO: Should we make this an array so that it is easier to reference from
#       other fields?
# TODO: What if there are multiple versions of the same resource ID? For
#       example, fetch the same HTTP file twice and get two different artifacts?
materials:
  # The set of independent input artifacts that were not referenced by any other
  # artifact. This is usually a single artifact containing the recipe and source
  # code.
  'git+https://github.com/curl/curl@curl-7_72_0':
    git_commit: 9d954e49bce3706a9a2efb119ecd05767f0f2a9e

  # The base VM or container image that the builder ran the build steps on.
  'github_hosted_vm:ubuntu-18.04:20210123.1':
    # No digests available.

  # GitHub Actions.
  'git+https://github.com/actions/checkout@v2':
    git_commit: 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
  'git+https://github.com/actions/upload-artifact@v2':
    git_commit: e448a9b857ee2131e752b06002bf0e093c65e571

  # Apt packages installed by the workflow.
  'pkg:deb/debian/stunnel4@5.50-3?arch=amd64':
    sha256: e1731ae217fcbc64d4c00d707dcead45c828c5f762bcf8cc56d87de511e096fa
  'pkg:deb/debian/python-impacket@0.9.15-5?arch=all':
    sha256: 71fa2e67376c8bc03429e154628ddd7b196ccf9e79dec7319f9c3a312fd76469
  'pkg:deb/debian/libzstd-dev@1.3.8+dfsg-3?arch=amd64':
    sha256: 91442b0ae04afc25ab96426761bbdf04b0e3eb286fdfbddb1e704444cb12a625
  'pkg:deb/debian/libbrotli-dev@1.0.7-2+deb10u1?arch=amd64':
    sha256: 05b6e467173c451b6211945de47ac0eda2a3dccb3cc7203e800c633f74de8b4f
  # plus all their dependencies

# --- Fields specific to provenance type ---

# Idenfifies the entity that executed the build steps.
#
# This is distinct from `signer` because one signer may map to more than one
# builder. For example, a signle GitHubActions signer may produce attestations
# for both "github-hosted runner" and "self-hosted runner" builders, each with
# distinct IDs.
#
# Verifiers MUST only accept specific builders from specific signers.
builder:
  # URI indicating the builder's identity.
  #
  # The following value means that the build was executed by GitHub Actions on a
  # GitHub Hosted Runner. Self-hosted runners would have a different ID, though
  # details are still TBD.
  id: https://github.com/Attestations/GitHubHostedActions@v1

# Describes the actions that the builder performed.
recipe:
  # URI indicating what type of recipe was performed. It determines the meaning
  # of `entry_point`, `arguments`, and the top-level `materials` and
  # `reproducibility`.
  #
  # The following value means that the recipe is a GitHub Actions Workflow.
  type: https://github.com/Attestations/GitHubActionsWorkflow@v1

  # The artifact in `materials` containing the recipe steps that are not implied
  # by `type`. For example, if the recipe type were "make", then this would
  # point to the Makefile, not the `make` program itself.
  #
  # Omit this field (or use null) if the recipe doesn't come from a material.
  #
  # TODO: What if there is more than one material?
  #
  # For GitHub Actions Workflow, it is the git repository containing the
  # `.github/workflows/$WORKFLOW` file.
  material: git+https://github.com/curl/curl@curl-7_72_0

  # String identifying the entry point. The meaning is defined by `type`.
  #
  # For GitHub Actions Workflow, it is "$WORKFLOW:$JOB".
  entry_point: build.yaml:maketgz

  # Set of input arguments that influenced the build on top of `material` and
  # `entry_point`.
  # It is an object whose schema is defined by `type`, or may be null or
  # undefined to indicate "no arguments."
  #
  # For GitHub Actions Workflow, it is the workflow_dispatch inputs.
  # (TODO: any others?)
  arguments: null

# Other information that is needed to reproduce the build but that cannot be
# controlled by users.
reproducibility:
  # --- Standard fields ---

  # The architecture and operating system that the builder ran on.
  # https://github.com/golang/go/blob/master/src/go/build/syslist.go
  arch: amd64           # GOARCH

  # --- Fields dependent on `recipe.type` ---

  context:
    # TODO: Should we record any other context fields that affected the build?
    # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

# Properties of the build.
metadata:
  # The timestamp of when the build occurred. This is often very useful for
  # debugging.
  build_timestamp: '2020-08-19T08:38:00Z'

  # If true, `materials` is guaranteed to be complete, usually through some
  # controls to prevent network access.
  #
  # For GitHub Actions, this is always false today, but we hope that eventually
  # such a feature gets built.
  materials_complete: false
